name: Build, Deploy & Setup Azure Infra

on:
  workflow_dispatch:
    inputs:
      teamName:
        description: "Team Name (IMPORTANT)"
        default: "team7"

permissions:
  contents: read
  packages: write
  id-token: write

env:
  REGISTRY: ghcr.io
  LOC_CORE: westeurope
  LOC_SQL:  swedencentral

jobs:
  build_test_survey:
    runs-on: ubuntu-22.04
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup .NET 9 SDK
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: "9.0.x"

    - name: Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
        restore-keys: |
          ${{ runner.os }}-nuget-

    # Build & Test Survey App
    - name: Restore & Build Survey-App
      working-directory: src/Survey-App
      run: |
        dotnet restore
        dotnet build --no-restore --configuration Release

    - name: Run Survey-Tests
      working-directory: tests/Survey-Tests
      run: dotnet test --verbosity normal
    # Build & Push survey container app
    - name: Lower-case the repo owner
      shell: bash
      run: echo "OWNER_LOWER=${GITHUB_REPOSITORY_OWNER,,}" >> $GITHUB_ENV

    - name: Log in to GHCR
      uses: docker/login-action@v2
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GHCR_PAT }}

    - name: Build & Push Survey-App image
      uses: docker/build-push-action@v6
      with:
        context: src/Survey-App
        file: src/Survey-App/Dockerfile
        push: true
        tags: |
          ${{ env.REGISTRY }}/${{ env.OWNER_LOWER }}/survey-app-${{ github.event.inputs.teamName }}:${{ github.sha }}
          ${{ env.REGISTRY }}/${{ env.OWNER_LOWER }}/survey-app-${{ github.event.inputs.teamName }}:${{ github.ref_name || github.head_ref }}
        build-args: |
          NUGET_AUTH_TOKEN=${{ secrets.GITHUB_TOKEN }}
          USERNAME=${{ github.actor }}

  build_test_reporting:
    runs-on: ubuntu-22.04
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup .NET 9 SDK
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: "9.0.x"

    - name: Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
        restore-keys: |
          ${{ runner.os }}-nuget-

    # Build & Test Survey App
    - name: Restore & Build Reporting-App
      working-directory: src/Reporting-App
      run: |
        dotnet restore
        dotnet build --no-restore --configuration Release

    - name: Run Reporting-Tests
      working-directory: tests/Reporting-Tests
      run: dotnet test --verbosity normal

    # Build & Push report container app
    - name: Lower-case the repo owner
      shell: bash
      run: echo "OWNER_LOWER=${GITHUB_REPOSITORY_OWNER,,}" >> $GITHUB_ENV

    - name: Log in to GHCR
      uses: docker/login-action@v2
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GHCR_PAT }}

    - name: Build & Push Reporting-App image
      uses: docker/build-push-action@v6
      with:
        context: src/Reporting-App
        file: src/Reporting-App/Dockerfile
        push: true
        tags: |
          ${{ env.REGISTRY }}/${{ env.OWNER_LOWER }}/reporting-app-${{ github.event.inputs.teamName }}:${{ github.sha }}
          ${{ env.REGISTRY }}/${{ env.OWNER_LOWER }}/reporting-app-${{ github.event.inputs.teamName }}:${{ github.ref_name || github.head_ref }}
        build-args: |
          NUGET_AUTH_TOKEN=${{ secrets.GITHUB_TOKEN }}
          USERNAME=${{ github.actor }}

  setup_and_deploy_azure_infra:
    needs: [build_test_survey, build_test_reporting]
    runs-on: ubuntu-22.04
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup .NET 9 SDK
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: "9.0.x"

    - name: Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
        restore-keys: |
          ${{ runner.os }}-nuget-
          
    - name: Cache dotnet tools
      uses: actions/cache@v4
      with:
        path: ~/.dotnet/tools
        key: ${{ runner.os }}-dotnet-tools-${{ hashFiles('**/global.json') }}

    - name: Install dotnet-ef Tool
      run: dotnet tool install --global dotnet-ef

    - name: Add dotnet tools to PATH
      run: echo "$HOME/.dotnet/tools" >> $GITHUB_PATH

    # Provision Azure Resources
    - name: Azure Login (service-principal)
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    # Create team-rg if needed
    - name: Ensure team RG
      run: |
        az group create \
          --name rg-${{ github.event.inputs.teamName }}-apps \
          --location $LOC_CORE

    # Create team AD group
    - name: Ensure team AD group
      env:
        TEAM: ${{ github.event.inputs.teamName }}
      run: |
        set -e
        GROUP_NAME="${TEAM}-contributor"

        echo "Checking if group '$GROUP_NAME' exists..."
        if az ad group show --group "$GROUP_NAME" &> /dev/null; then
          echo "Group already exists."
        else
          echo "Group does not exist. Creating '$GROUP_NAME'..."
          az ad group create --display-name "$GROUP_NAME" --mail-nickname "$GROUP_NAME"
        fi

    # Provision team-sqlsvr, team-db and add firewall-rule to allow ALL access to/from azure-services
    - name: Create team SQL Server & DB if not exist
      env:
        TEAM:         ${{ github.event.inputs.teamName }}
        RG_TEAM:      rg-${{ github.event.inputs.teamName }}-apps
        LOC_SQL:      ${{ env.LOC_SQL }}
        ADMIN_LOGIN:  dbadmin
      run: |
        SQL_SERVER=sqlsvr-${TEAM}
        DB_NAME=surveydb-${TEAM}
        DB_PW=Password123!-${TEAM}
        if ! az sql server show --name $SQL_SERVER --resource-group $RG_TEAM &> /dev/null; then
          az sql server create \
              --name $SQL_SERVER \
              --resource-group $RG_TEAM \
              --location $LOC_SQL \
              --admin-user $ADMIN_LOGIN \
              --admin-password $DB_PW

          az sql server firewall-rule create \
              --resource-group $RG_TEAM \
              --server $SQL_SERVER \
              --name AllowAzureServices \
              --start-ip-address 0.0.0.0 --end-ip-address 0.0.0.0
        fi

        if ! az sql db show --name $DB_NAME --resource-group $RG_TEAM &> /dev/null; then
          az sql db create \
            --resource-group $RG_TEAM \
            --server $SQL_SERVER \
            --name   $DB_NAME \
            --service-objective S0
        fi

        echo "SQL_SERVER=$SQL_SERVER" >> $GITHUB_ENV
        echo "DB_NAME=$DB_NAME"       >> $GITHUB_ENV

    # Provision team-kv and add secrets
    - name: Provision Key Vault and store secrets
      env:
        TEAM:        ${{ github.event.inputs.teamName }}
        RG_TEAM:     rg-${{ github.event.inputs.teamName }}-apps
        LOC_CORE:         ${{ env.LOC_CORE }}
        ADMIN_PW:         ${{ secrets.RO_DB_PASSWORD }}
        RO_PW:            ${{ secrets.RO_DB_PASSWORD }}
        ACS_CONNSTR:      ${{ secrets.ACS_CONNSTR }}
        ACS_SENDER_EMAIL: ${{ secrets.ACS_SENDER_EMAIL }}
        OPEN_AI_ENDPOINT: ${{ secrets.OPEN_AI_ENDPOINT }}
        OPEN_AI_API_KEY:  ${{ secrets.OPEN_AI_API_KEY }}
        GITHUB_TOKEN:     ${{ secrets.GHCR_PAT }}
      shell: bash
      run: |
        set -e
        KV=kv-${TEAM}-27410

        # not idempotent, check if kv already exists
        if az keyvault show --name $KV --resource-group $RG_TEAM &>/dev/null; then
          echo "Key Vault $KV already exists – skipping create."
        else
          az keyvault create \
            --name $KV \
            --resource-group $RG_TEAM \
            --location $LOC_CORE \
            --enable-rbac-authorization false
        fi

        SP_APPID=$(az account show --query "user.name" -o tsv)
        SP_OBJID=$(az ad sp show --id "$SP_APPID" --query id -o tsv)

        az keyvault set-policy \
          --name $KV \
          --object-id $SP_OBJID \
          --secret-permissions get list set delete

        GITHUB_TOKEN=${{ secrets.GHCR_PAT }}
        APP_PW="Password123!-${TEAM}"
        APP_DB_CONNSTR="Server=tcp:sqlsvr-${TEAM}.database.windows.net,1433;Initial Catalog=surveydb-${TEAM};User ID=appuser;Password=${APP_PW};Encrypt=True;Connection Timeout=30;"
        RO_DB_CONNSTR="Server=tcp:sqlsvr-hackathon-shared.database.windows.net,1433;Initial Catalog=db-hackathon-shared;User ID=${TEAM}-ro;Password=${RO_PW};Encrypt=True;TrustServerCertificate=False;Connection Timeout=30;"
        BLAZOR_SURVEY_BASE_URL="https://survey-${TEAM}.kindcoast-376f1c53.westeurope.azurecontainerapps.io/survey"

        az keyvault secret set --vault-name $KV --name app-db-connstr --value "$APP_DB_CONNSTR"
        az keyvault secret set --vault-name $KV --name ro-db-connstr  --value "$RO_DB_CONNSTR"
        az keyvault secret set --vault-name $KV --name github-token      --value "$GITHUB_TOKEN"
        az keyvault secret set --vault-name $KV --name open-ai-endpoint      --value "$OPEN_AI_ENDPOINT"
        az keyvault secret set --vault-name $KV --name open-ai-api-key      --value "$OPEN_AI_API_KEY"
        az keyvault secret set --vault-name $KV --name blazor-survey-base-url      --value "$BLAZOR_SURVEY_BASE_URL"
        az keyvault secret set --vault-name $KV --name acs-connstr      --value "$ACS_CONNSTR"
        az keyvault secret set --vault-name $KV --name acs-sender-email      --value "$ACS_SENDER_EMAIL"

        echo "KV_URI=https://$KV.vault.azure.net" >> $GITHUB_ENV

    # Grant shared-uami GET/LIST permissions on team-kv (for containerApps and functionApps)
    - name: Grant Key Vault access to Shared UAMI
      env:
        TEAM: ${{ github.event.inputs.teamName }}
        RG_TEAM: rg-${{ github.event.inputs.teamName }}-apps
      run: |
        KV="kv-${TEAM}-27410"
        UAMI_RG="rg-hackathon-shared"
        UAMI_NAME="shared-uami"
        UAMI_PRINCIPAL_ID=$(az identity show --name $UAMI_NAME --resource-group $UAMI_RG --query 'principalId' -o tsv)
        az keyvault set-policy \
          --name $KV \
          --object-id $UAMI_PRINCIPAL_ID \
          --secret-permissions get list

    # Grant team AD group GET/LIST permission via policy on team-kv
    # Grant HackathonAdmins GET/LIST on team-kv
    - name: Grant Key Vault secret permissions to team group
      env:
        TEAM: ${{ github.event.inputs.teamName }}
        TEAM_KV: kv-${{ github.event.inputs.teamName }}-27410
      run: |
        GROUP_NAME="${TEAM}-contributor"
        TEAM_GROUP_OBJECT_ID=$(az ad group show --group "$GROUP_NAME" --query id -o tsv)
        az keyvault set-policy \
          --name $TEAM_KV \
          --object-id $TEAM_GROUP_OBJECT_ID \
          --secret-permissions get list

        GROUP_NAME="HackathonAdmins"
        TEAM_GROUP_OBJECT_ID=$(az ad group show --group "$GROUP_NAME" --query id -o tsv)
        az keyvault set-policy \
          --name $TEAM_KV \
          --object-id $TEAM_GROUP_OBJECT_ID \
          --secret-permissions get list

    # Assign Contributor role for team-rg, assign Reader role for shared-rg
    - name: Assign correct roles to team AD group
      env:
        TEAM: ${{ github.event.inputs.teamName }}
        TEAM_RG: rg-${{ github.event.inputs.teamName }}-apps
        SHARED_RG: rg-hackathon-shared
      run: |
        set -e
        GROUP_NAME="${TEAM}-contributor"

        TEAM_GROUP_OBJECT_ID=$(az ad group show --group "$GROUP_NAME" --query id -o tsv)
        RG_SCOPE=$(az group show --name "$TEAM_RG" --query id -o tsv)

        echo "Assigning Contributor role to '$GROUP_NAME' on resource group '$TEAM_RG'..."
        az role assignment create \
          --assignee-object-id $TEAM_GROUP_OBJECT_ID \
          --assignee-principal-type Group \
          --role Contributor \
          --scope $RG_SCOPE

        RG_SCOPE=$(az group show --name "$SHARED_RG" --query id -o tsv)

        echo "Assigning Reader role to '$GROUP_NAME' on resource group '$SHARED_RG'..."
        az role assignment create \
          --assignee-object-id $TEAM_GROUP_OBJECT_ID \
          --assignee-principal-type Group \
          --role Reader \
          --scope $RG_SCOPE

    # Add correct users from json to the team AD group
    - name: Add correct users to team AD group
      env:
        GROUP_NAME: ${{ github.event.inputs.teamName }}-contributor
        JSON_FILE: .github/azure/users/azure-group-members-backup.json
      run: |
        set -e

        if [ ! -f "$JSON_FILE" ]; then
          echo "Could not find $JSON_FILE"
          exit 1
        fi

        echo "Looking for users in group '$GROUP_NAME' in $JSON_FILE..."

        user_ids=$(jq -r --arg group "$GROUP_NAME" '.[] | select(.group_name == $group) | .users[].Id' "$JSON_FILE")

        if [ -z "$user_ids" ]; then
          echo "No users found for group '$GROUP_NAME' in JSON."
          exit 0
        fi

        for user_id in $user_ids; do
          echo "Adding user $user_id to group $GROUP_NAME..."
          az ad group member add --group "$GROUP_NAME" --member-id "$user_id" || echo "Warning: Could not add $user_id"
        done

    - name: Install sqlcmd tools
      shell: bash
      run: |
        set -e
        if ! test -f /etc/apt/trusted.gpg.d/microsoft.gpg; then
          curl -sSL https://packages.microsoft.com/keys/microsoft.asc | sudo gpg --dearmor -o /etc/apt/trusted.gpg.d/microsoft.gpg
        fi
        sudo apt-get update -y
        sudo ACCEPT_EULA=Y apt-get install -y mssql-tools18 msodbcsql18 unixodbc-dev
        echo "/opt/mssql-tools18/bin" >> $GITHUB_PATH

    # Create Read/Write user for team db, Create Read user for shared db
    - name: Create SQL users with sqlcmd
      env:
        TEAM:        ${{ github.event.inputs.teamName }}
        SQL_SERVER:  sqlsvr-${{ github.event.inputs.teamName }}
        DB_NAME:     surveydb-${{ github.event.inputs.teamName }}
        SHARED_ADMIN_PW: ${{ secrets.RO_DB_PASSWORD }}
        RO_PW:           ${{ secrets.RO_DB_PASSWORD }}
      shell: bash
      run: |
        set -e
        APP_PW="Password123!-${TEAM}"

        sqlcmd -S ${SQL_SERVER}.database.windows.net \
               -U dbadmin -P "$APP_PW" -d master \
               -Q "IF NOT EXISTS (SELECT * FROM sys.sql_logins WHERE name = 'appuser')
                   BEGIN
                     CREATE LOGIN appuser WITH PASSWORD = '${APP_PW}';
                   END"

        sqlcmd -S ${SQL_SERVER}.database.windows.net \
               -U dbadmin -P "$APP_PW" -d ${DB_NAME} \
               -Q "IF NOT EXISTS (SELECT * FROM sys.database_principals WHERE name = 'appuser')
                   BEGIN
                     CREATE USER appuser FOR LOGIN appuser;
                     ALTER ROLE db_datareader ADD MEMBER appuser;
                     ALTER ROLE db_datawriter ADD MEMBER appuser;
                   END"

        SHARED_SVR="sqlsvr-hackathon-shared"
        SHARED_DB="db-hackathon-shared"

        sqlcmd -S ${SHARED_SVR}.database.windows.net \
               -U dbadmin -P "$SHARED_ADMIN_PW" -d master \
               -Q "IF NOT EXISTS (SELECT * FROM sys.sql_logins WHERE name = '${TEAM}-ro')
                   BEGIN
                     CREATE LOGIN [${TEAM}-ro] WITH PASSWORD = '${RO_PW}';
                   END"

        sqlcmd -S ${SHARED_SVR}.database.windows.net \
               -U dbadmin -P "$SHARED_ADMIN_PW" -d ${SHARED_DB} \
               -Q "IF NOT EXISTS (SELECT * FROM sys.database_principals WHERE name = '${TEAM}-ro')
                   BEGIN
                     CREATE USER [${TEAM}-ro] FOR LOGIN [${TEAM}-ro];
                     ALTER ROLE db_datareader ADD MEMBER [${TEAM}-ro];
                   END"

    - name: Run EF Core Migrations
      working-directory: src/Survey-App
      env:
        TEAM: ${{ github.event.inputs.teamName }}
      run: |
        dotnet ef database update --connection "Server=tcp:sqlsvr-${TEAM}.database.windows.net,1433;Initial Catalog=surveydb-${TEAM};User ID=dbadmin;Password=Password123!-${TEAM};Encrypt=True;Connection Timeout=30;"

    - name: Lower-case the repo owner
      shell: bash
      run: echo "OWNER_LOWER=${GITHUB_REPOSITORY_OWNER,,}" >> $GITHUB_ENV

    # Deploy container apps 
    - name: Deploy Survey Container App
      env:
        TEAM:         ${{ github.event.inputs.teamName }}
        RG_TEAM:      rg-${{ github.event.inputs.teamName }}-apps
        REGISTRY:     ${{ env.REGISTRY }}
        OWNER_LOWER:  ${{ env.OWNER_LOWER }}
        SHA:          ${{ github.sha }}
      run: |
        az deployment group create \
          --resource-group $RG_TEAM \
          --template-file ./Infrastructure/survey.bicep \
          --parameters ./Infrastructure/survey.bicepparam \
               teamName=$TEAM \
               surveyImage=$REGISTRY/$OWNER_LOWER/survey-app-$TEAM:$SHA \
               registryUsername=${{ github.actor }} 

    - name: Deploy Report Container App
      env:
        TEAM:         ${{ github.event.inputs.teamName }}
        RG_TEAM:      rg-${{ github.event.inputs.teamName }}-apps
        REGISTRY:     ${{ env.REGISTRY }}
        OWNER_LOWER:  ${{ env.OWNER_LOWER }}
        SHA:          ${{ github.sha }}
      run: |
        az deployment group create \
          --resource-group $RG_TEAM \
          --template-file ./Infrastructure/reporting.bicep \
          --parameters ./Infrastructure/reporting.bicepparam \
               teamName=$TEAM \
               reportingImage=$REGISTRY/$OWNER_LOWER/reporting-app-$TEAM:$SHA \
               registryUsername=${{ github.actor }} 

  # Execute workflow --> check for team function apps, add shared-uami --> grant access to team kv
  assign_uami_to_functions:
    needs: setup_and_deploy_azure_infra
    uses: Kelag-Hackathon/team7/.github/workflows/setup-team-function-app.yml@main
    with:
      teamName: ${{ github.event.inputs.teamName }}
    secrets: inherit

