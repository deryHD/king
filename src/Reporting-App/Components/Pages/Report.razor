@page "/report"
@using Reporting_App.Services
@using System.Globalization
@inject IReportingService ReportingService
@inject IJSRuntime JSRuntime

<PageTitle>NPS Dashboard</PageTitle>

<div class="container-fluid">
    <div class="row mb-4">
        <div class="col-12">
            <h1 class="display-4 text-primary">
                <i class="bi bi-graph-up me-3"></i>
                NPS Intelligence Dashboard
            </h1>
            <p class="lead text-muted">Übersicht über Kundenfeedback und Net Promoter Score</p>
        </div>
    </div>

    <!-- Filter Section -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="card shadow-sm">
                <div class="card-body">
                    <h5 class="card-title">
                        <i class="bi bi-funnel me-2"></i>
                        Filter
                    </h5>
                    <div class="row g-3">
                        <div class="col-md-3">
                            <label class="form-label">Von Datum</label>
                            <input type="date" class="form-control" @bind="startDate" @onchange="LoadDashboardData" />
                        </div>
                        <div class="col-md-3">
                            <label class="form-label">Bis Datum</label>
                            <input type="date" class="form-control" @bind="endDate" @onchange="LoadDashboardData" />
                        </div>
                        <div class="col-md-3">
                            <label class="form-label">Team</label>
                            <select class="form-select" @bind="selectedTeam" @onchange="LoadDashboardData">
                                <option value="">Alle Teams</option>
                                @foreach (var team in availableTeams)
                                {
                                    <option value="@team">@team</option>
                                }
                            </select>
                        </div>
                        <div class="col-md-3 d-flex align-items-end">
                            <button class="btn btn-outline-primary me-2" @onclick="ResetFilters">
                                <i class="bi bi-arrow-clockwise me-1"></i>
                                Zurücksetzen
                            </button>
                            <button class="btn btn-success" @onclick="ExportData">
                                <i class="bi bi-download me-1"></i>
                                Export CSV
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    @if (isLoading)
    {
        <div class="text-center">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Lädt...</span>
            </div>
            <p class="mt-3">Dashboard wird geladen...</p>
        </div>
    }
    else if (dashboardData != null)
    {
        <!-- KPI Cards -->
        <div class="row mb-4">
            <div class="col-md-3">
                <div class="card bg-primary text-white h-100">
                    <div class="card-body">
                        <div class="d-flex justify-content-between">
                            <div>
                                <h6 class="card-title">Durchschnittlicher NPS</h6>
                                <h2 class="mb-0">@dashboardData.AverageNpsScore.ToString("F1")</h2>
                            </div>
                            <div class="align-self-center">
                                <i class="bi bi-star-fill fs-1"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="card bg-success text-white h-100">
                    <div class="card-body">
                        <div class="d-flex justify-content-between">
                            <div>
                                <h6 class="card-title">Promoter</h6>
                                <h2 class="mb-0">@dashboardData.PromoterCount</h2>
                                <small>@((dashboardData.TotalResponses > 0 ? (double)dashboardData.PromoterCount / dashboardData.TotalResponses * 100 : 0).ToString("F1"))%</small>
                            </div>
                            <div class="align-self-center">
                                <i class="bi bi-hand-thumbs-up-fill fs-1"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="card bg-warning text-white h-100">
                    <div class="card-body">
                        <div class="d-flex justify-content-between">
                            <div>
                                <h6 class="card-title">Passive</h6>
                                <h2 class="mb-0">@dashboardData.PassiveCount</h2>
                                <small>@((dashboardData.TotalResponses > 0 ? (double)dashboardData.PassiveCount / dashboardData.TotalResponses * 100 : 0).ToString("F1"))%</small>
                            </div>
                            <div class="align-self-center">
                                <i class="bi bi-dash-circle-fill fs-1"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="card bg-danger text-white h-100">
                    <div class="card-body">
                        <div class="d-flex justify-content-between">
                            <div>
                                <h6 class="card-title">Detraktoren</h6>
                                <h2 class="mb-0">@dashboardData.DetractorCount</h2>
                                <small>@((dashboardData.TotalResponses > 0 ? (double)dashboardData.DetractorCount / dashboardData.TotalResponses * 100 : 0).ToString("F1"))%</small>
                            </div>
                            <div class="align-self-center">
                                <i class="bi bi-hand-thumbs-down-fill fs-1"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Additional KPIs -->
        <div class="row mb-4">
            <div class="col-md-6">
                <div class="card h-100">
                    <div class="card-body">
                        <h5 class="card-title">
                            <i class="bi bi-people me-2"></i>
                            Antwortrate
                        </h5>
                        <div class="d-flex align-items-center">
                            <div class="progress flex-grow-1 me-3" style="height: 20px;">
                                <div class="progress-bar bg-info" 
                                     role="progressbar" 
                                     style="width: @(dashboardData.ResponseRate)%">
                                </div>
                            </div>
                            <span class="fw-bold">@dashboardData.ResponseRate.ToString("F1")%</span>
                        </div>
                        <small class="text-muted">@dashboardData.TotalResponses von gesendeten Einladungen</small>
                    </div>
                </div>
            </div>
            <div class="col-md-6">
                <div class="card h-100">
                    <div class="card-body">
                        <h5 class="card-title">
                            <i class="bi bi-calculator me-2"></i>
                            NPS Berechnung
                        </h5>
                        <div class="row text-center">
                            <div class="col-4">
                                <div class="text-success">
                                    <strong>@((dashboardData.TotalResponses > 0 ? (double)dashboardData.PromoterCount / dashboardData.TotalResponses * 100 : 0).ToString("F0"))%</strong>
                                    <br><small>Promoter</small>
                                </div>
                            </div>
                            <div class="col-1 align-self-center">
                                <strong>-</strong>
                            </div>
                            <div class="col-4">
                                <div class="text-danger">
                                    <strong>@((dashboardData.TotalResponses > 0 ? (double)dashboardData.DetractorCount / dashboardData.TotalResponses * 100 : 0).ToString("F0"))%</strong>
                                    <br><small>Detraktoren</small>
                                </div>
                            </div>
                            <div class="col-1 align-self-center">
                                <strong>=</strong>
                            </div>
                            <div class="col-2">
                                <div class="text-primary">
                                    <strong>@CalculateNpsScore()</strong>
                                    <br><small>NPS</small>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Charts Row -->
        <div class="row mb-4">
            <!-- Monthly Trend Chart -->
            <div class="col-md-8">
                <div class="card h-100">
                    <div class="card-header">
                        <h5 class="mb-0">
                            <i class="bi bi-graph-up me-2"></i>
                            NPS Trend (12 Monate)
                        </h5>
                    </div>
                    <div class="card-body">
                        <canvas id="trendChart" width="400" height="200"></canvas>
                    </div>
                </div>
            </div>

            <!-- Sentiment Distribution -->
            <div class="col-md-4">
                <div class="card h-100">
                    <div class="card-header">
                        <h5 class="mb-0">
                            <i class="bi bi-pie-chart me-2"></i>
                            Sentiment Verteilung
                        </h5>
                    </div>
                    <div class="card-body">
                        @if (dashboardData.SentimentData.Any())
                        {
                            @foreach (var sentiment in dashboardData.SentimentData)
                            {
                                <div class="mb-3">
                                    <div class="d-flex justify-content-between mb-1">
                                        <span>@sentiment.SentimentLabel</span>
                                        <span>@sentiment.Count (@sentiment.Percentage.ToString("F1")%)</span>
                                    </div>
                                    <div class="progress" style="height: 8px;">
                                        <div class="progress-bar @GetSentimentColor(sentiment.SentimentLabel)" 
                                             style="width: @(sentiment.Percentage)%"></div>
                                    </div>
                                </div>
                            }
                        }
                        else
                        {
                            <p class="text-muted text-center">Keine Sentiment-Daten verfügbar</p>
                        }
                    </div>
                </div>
            </div>
        </div>

        <!-- Team Performance Table -->
        <div class="row">
            <div class="col-12">
                <div class="card">
                    <div class="card-header">
                        <h5 class="mb-0">
                            <i class="bi bi-people-fill me-2"></i>
                            Team Performance
                        </h5>
                    </div>
                    <div class="card-body">
                        @if (dashboardData.TeamData.Any())
                        {
                            <div class="table-responsive">
                                <table class="table table-hover">
                                    <thead class="table-light">
                                        <tr>
                                            <th>Team</th>
                                            <th>Durchschnittlicher NPS</th>
                                            <th>Antworten</th>
                                            <th>Promoter</th>
                                            <th>Passive</th>
                                            <th>Detraktoren</th>
                                            <th>NPS Score</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var team in dashboardData.TeamData)
                                        {
                                            <tr>
                                                <td><strong>@team.TeamName</strong></td>
                                                <td>@team.AverageScore.ToString("F1")</td>
                                                <td>@team.ResponseCount</td>
                                                <td><span class="badge bg-success">@team.PromoterCount</span></td>
                                                <td><span class="badge bg-warning">@team.PassiveCount</span></td>
                                                <td><span class="badge bg-danger">@team.DetractorCount</span></td>
                                                <td>
                                                    <strong class="@GetNpsScoreColor(CalculateTeamNpsScore(team))">
                                                        @CalculateTeamNpsScore(team)
                                                    </strong>
                                                </td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                        }
                        else
                        {
                            <p class="text-muted text-center">Keine Team-Daten verfügbar</p>
                        }
                    </div>
                </div>
            </div>
        </div>
    }
</div>

@code {
    private NpsDashboardData? dashboardData;
    private List<string> availableTeams = new();
    private DateTime? startDate;
    private DateTime? endDate;
    private string selectedTeam = "";
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadAvailableTeams();
        await LoadDashboardData();
        await InitializeCharts();
    }

    private async Task LoadAvailableTeams()
    {
        availableTeams = await ReportingService.GetAvailableTeamsAsync();
    }

    private async Task LoadDashboardData()
    {
        isLoading = true;
        try
        {
            dashboardData = await ReportingService.GetDashboardDataAsync(startDate, endDate, 
                string.IsNullOrEmpty(selectedTeam) ? null : selectedTeam);
            
            if (dashboardData != null)
            {
                await UpdateTrendChart();
            }
        }
        catch (Exception ex)
        {
            // Log error
            Console.WriteLine($"Error loading dashboard data: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task ResetFilters()
    {
        startDate = null;
        endDate = null;
        selectedTeam = "";
        await LoadDashboardData();
    }

    private async Task ExportData()
    {
        try
        {
            var csvData = await ReportingService.ExportNpsDataToCsvAsync(startDate, endDate, 
                string.IsNullOrEmpty(selectedTeam) ? null : selectedTeam);
            
            var fileName = $"nps-data-{DateTime.Now:yyyy-MM-dd}.csv";
            await JSRuntime.InvokeVoidAsync("downloadFile", fileName, Convert.ToBase64String(csvData));
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error exporting data: {ex.Message}");
        }
    }

    private string CalculateNpsScore()
    {
        if (dashboardData == null || dashboardData.TotalResponses == 0) return "0";
        
        var promoterPercentage = (double)dashboardData.PromoterCount / dashboardData.TotalResponses * 100;
        var detractorPercentage = (double)dashboardData.DetractorCount / dashboardData.TotalResponses * 100;
        var npsScore = promoterPercentage - detractorPercentage;
        
        return npsScore.ToString("F0");
    }

    private string CalculateTeamNpsScore(TeamNpsData team)
    {
        if (team.ResponseCount == 0) return "0";
        
        var promoterPercentage = (double)team.PromoterCount / team.ResponseCount * 100;
        var detractorPercentage = (double)team.DetractorCount / team.ResponseCount * 100;
        var npsScore = promoterPercentage - detractorPercentage;
        
        return npsScore.ToString("F0");
    }

    private string GetNpsScoreColor(string npsScore)
    {
        if (double.TryParse(npsScore, out var score))
        {
            return score >= 50 ? "text-success" : score >= 0 ? "text-warning" : "text-danger";
        }
        return "text-muted";
    }

    private string GetSentimentColor(string sentiment)
    {
        return sentiment.ToLower() switch
        {
            "sehr zufrieden" => "bg-success",
            "zufrieden" => "bg-info",
            "neutral" => "bg-secondary",
            "unzufrieden" => "bg-warning",
            "sehr unzufrieden" => "bg-danger",
            _ => "bg-secondary"
        };
    }

    private async Task InitializeCharts()
    {
        await JSRuntime.InvokeVoidAsync("initializeChart");
    }

    private async Task UpdateTrendChart()
    {
        if (dashboardData?.MonthlyTrend != null)
        {
            var labels = dashboardData.MonthlyTrend.Select(m => $"{m.MonthName} {m.Year}").ToArray();
            var data = dashboardData.MonthlyTrend.Select(m => m.AverageScore).ToArray();
            
            await JSRuntime.InvokeVoidAsync("updateTrendChart", labels, data);
        }
    }
}

<script>
    let trendChart;

    window.initializeChart = () => {
        const ctx = document.getElementById('trendChart');
        if (ctx) {
            trendChart = new Chart(ctx, {
                type: 'line',
                data: {
                    labels: [],
                    datasets: [{
                        label: 'Durchschnittlicher NPS',
                        data: [],
                        borderColor: 'rgb(75, 192, 192)',
                        backgroundColor: 'rgba(75, 192, 192, 0.2)',
                        tension: 0.1
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    scales: {
                        y: {
                            beginAtZero: true,
                            max: 10
                        }
                    }
                }
            });
        }
    };

    window.updateTrendChart = (labels, data) => {
        if (trendChart) {
            trendChart.data.labels = labels;
            trendChart.data.datasets[0].data = data;
            trendChart.update();
        }
    };

    window.downloadFile = (filename, base64Data) => {
        const link = document.createElement('a');
        link.href = 'data:text/csv;base64,' + base64Data;
        link.download = filename;
        link.click();
    };
</script>